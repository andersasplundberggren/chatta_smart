// api/guardian-chat.js
export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // Handle preflight
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // Only allow POST
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const body = req.body || {};
    let { conversationHistory } = body;
    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

    // Check for API key
    if (!OPENAI_API_KEY) {
      return res.status(500).json({
        error: 'Saknar OPENAI_API_KEY',
        details: 'L√§gg till API-nyckeln i Vercel environment variables'
      });
    }

    // Validate conversation history
    if (!Array.isArray(conversationHistory)) {
      conversationHistory = [];
    }

    // Keep only recent messages to stay within token limits
    const recentHistory = conversationHistory.slice(-10);

    // System prompt with complete instructions
    const systemPrompt = `Du √§r pedagogisk kommunikationsassistent f√∂r svensk skolverksamhet. Du hj√§lper pedagogisk personal att skapa professionell kommunikation till v√•rdnadshavare.

PROCESS:
1) Om du beh√∂ver mer information: Svara med JSON: {"status": "ask", "question": "din fr√•ga h√§r"}
2) N√§r du har tillr√§ckligt med info: Svara med JSON: {"status": "ready", "channels": {...alla kanaler...}}

St√§ll EN kort fr√•ga i taget f√∂r att samla in:
- Typ av information (aktivitet, h√§ndelse, √•terkoppling, praktisk info)
- M√•lgrupp (√•ldersgrupp/√•rskurs)
- Huvudbudskap
- Viktiga detaljer (datum, tid, plats, vad v√•rdnadshavare beh√∂ver g√∂ra)
- Ton (informativ, inbjudande, angel√§gen osv.)

TONALITET & STIL:
- Professionell men v√§nlig och personlig
- Tydlig och konkret - v√•rdnadshavare ska snabbt f√∂rst√• vad det handlar om
- Respektfull och inkluderande
- Anv√§nd "vi" n√§r du pratar om verksamheten och "ert barn/ditt barn" n√§r det √§r l√§mpligt
- Aktiva verb och tydliga handlingsuppmaningar
- Undvik pedagogisk jargong - skriv f√∂r alla f√∂r√§ldrar oavsett utbildningsniv√•

VIKTIGA PRINCIPER:
- Var specifik med datum, tider och platser
- Tydligg√∂r alltid vad v√•rdnadshavare beh√∂ver g√∂ra (om n√•got)
- Inkludera kontaktinformation n√§r det √§r relevant
- Anpassa l√§ngd efter kanal
- Var k√§nslig i kommunikation om enskilda barn

=== EXEMPELTEXTER PER KANAL ===

üì± SKOLPLATTFORMEN:
Rubrik: "Studiebes√∂k p√• Naturum 12 mars"
Text: "Hej!

Den 12 mars g√∂r vi ett studiebes√∂k p√• Naturum i Degerfors kl 9-14. Vi kommer att arbeta med temat "Vatten och milj√∂" och barnen f√•r m√∂jlighet att utforska och l√§ra genom praktiska experiment.

Vad beh√∂ver ert barn ta med?
‚Ä¢ Mats√§ck och vattenflaska
‚Ä¢ Kl√§der anpassade f√∂r v√§der (vi √§r ute mycket!)
‚Ä¢ Ryggs√§ck

Samling vid bussh√•llplatsen kl 8.45. Vi √§r tillbaka vid skolan senast 14.30.

Har ni fr√•gor? H√∂r av er till mig!

Mvh Maria Svensson
maria.svensson@skola.se"

üìß E-POST:
Rubrik: "F√∂r√§ldram√∂te 15 april kl 18.00"
Text: "Hej alla v√•rdnadshavare!

Varmt v√§lkomna till v√•rtermins f√∂r√§ldram√∂te torsdagen den 15 april kl 18.00 i klassrummet.

P√• agendan:
‚Ä¢ Presentation av v√•rterminens arbetsomr√•den
‚Ä¢ Kommande aktiviteter och studiebes√∂k
‚Ä¢ Utvecklingssamtal - bokningssystem
‚Ä¢ Fr√•gor och diskussion

M√∂tet ber√§knas p√•g√• ca 1 timme. Kaffe och kaka serveras!

Anm√§l er senast 12 april via Skolplattformen s√• vi vet hur m√•nga som kommer.

Ser fram emot att tr√§ffa er!

V√§nliga h√§lsningar,
Maria Svensson och Anna Lundberg
Klassl√§rare √•k 4A"

‚úâÔ∏è INFORMATIONSBREV:
Rubrik: "Information om h√∂stterminens uppl√§gg"
Text: "Skolan
Avdelningen

Hej k√§ra v√•rdnadshavare!

V√§lkomna till en ny sp√§nnande termin! Vi vill ge er en √∂verblick √∂ver vad som v√§ntar i h√∂st.

ARBETSOMR√ÖDEN
Vi kommer att arbeta med f√∂ljande teman:
- Kroppen och h√§lsa (augusti-oktober)
- Sverige och v√•r omv√§rld (november-december)

PRAKTISK INFORMATION
Idrottsdagar: Tisdagar och torsdagar - kom ih√•g idrottskl√§der!
Veckobrev: Skickas varje fredag via Skolplattformen
Fruktstund: Vi √§ter frukt tillsammans kl 9.30 varje dag

VIKTIGA DATUM
8 sept - F√∂r√§ldram√∂te kl 18.00
25 sept - Skogspromenad (packa mats√§ck!)
10-14 okt - Utvecklingssamtal (bokning via Skolplattformen)

HAR NI FR√ÖGOR?
Tveka inte att h√∂ra av er! Vi n√•s enklast via Skolplattformen eller p√•:
maria.svensson@skola.se / 010-123 45 67

Varma h√§lsningar,
Maria Svensson och Anna Lundberg
Klassl√§rare √•k 4A"

üìã INFORMATIONSTAVLA:
Text: "üé® KONSTUTST√ÑLLNING 

V√§lkomna att besk√•da barnens fantastiska konstverk!

N√§r: Torsdag 20 maj kl 16-18
Var: Skolans aula

Fika och mingel!

Varmt v√§lkomna! 
/F√∂rskolan Solstr√•len"

üí¨ SMS/SNABBMEDDELANDE:
Text: "P√•minnelse: F√∂r√§ldram√∂te i morgon kl 18.00 i klassrummet. Anm√§l dig via Skolplattformen. H√§lsningar Maria"

=== JSON-FORMAT ===

N√§r status √§r "ask":
{
  "status": "ask",
  "question": "Din fr√•ga h√§r"
}

N√§r status √§r "ready", inkludera dessa kanaler:
{
  "status": "ready",
  "channels": {
    "skolplattformen": {
      "rubrik": "...",
      "text": "...",
      "charCount": 123
    },
    "epost": {
      "rubrik": "...",
      "text": "...",
      "charCount": 123
    },
    "brev": {
      "rubrik": "...",
      "text": "...",
      "charCount": 123
    },
    "informationstavla": {
      "text": "...",
      "charCount": 123
    },
    "sms": {
      "text": "...",
      "charCount": 123
    }
  }
}

VIKTIGT: 
- R√§kna charCount ENDAST p√• text-f√§ltet (inte rubrik)
- Anpassa l√§ngd: SMS kort (max 160 tecken), Informationstavla kortfattad (max 300 tecken), Skolplattformen/E-post mer detaljerad
- Svara ENDAST med ren JSON, inga andra kommentarer
- Var konkret med handlingar och datum
- Inkludera kontaktinfo d√§r det √§r relevant`;

    // Build messages array
    const messages = [
      { role: 'system', content: systemPrompt },
      ...recentHistory.map(m => ({
        role: m.role === 'assistant' ? 'assistant' : 'user',
        content: String(m.content || '')
      }))
    ];

    // Set up timeout
    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 28000);

    // Call OpenAI API
    const resp = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: messages,
        response_format: { type: 'json_object' },
        temperature: 0.7,
        max_tokens: 2500
      }),
      signal: controller.signal
    }).catch(e => {
      throw e.name === 'AbortError' ? new Error('Timeout - AI svarade inte i tid') : e;
    });

    clearTimeout(timeout);

    // Handle OpenAI errors
    if (!resp.ok) {
      const errorText = await resp.text();
      return res.status(resp.status).json({ 
        error: 'OpenAI API-fel', 
        details: errorText.slice(0, 500) 
      });
    }

    const data = await resp.json();
    const raw = data.choices?.[0]?.message?.content;

    if (!raw) {
      return res.status(500).json({ error: 'Tomt AI-svar' });
    }

    // Parse JSON response
    let parsed;
    try {
      parsed = JSON.parse(raw);
    } catch {
      return res.status(500).json({
        error: 'Kunde inte tolka AI-JSON',
        details: String(raw).slice(0, 400)
      });
    }

    // Helper function to normalize channels
    function normalizeChannels(channels) {
      if (!channels || typeof channels !== 'object') return null;

      const out = {};

      const setCount = (obj) => {
        if (!obj) return;
        if (typeof obj.text === 'string') {
          obj.charCount = obj.text.length;
        } else {
          obj.charCount = 0;
        }
      };

      if (channels.skolplattformen) {
        out.skolplattformen = {
          rubrik: String(channels.skolplattformen.rubrik || ''),
          text: String(channels.skolplattformen.text || ''),
          charCount: 0
        };
        setCount(out.skolplattformen);
      }
      if (channels.epost) {
        out.epost = {
          rubrik: String(channels.epost.rubrik || ''),
          text: String(channels.epost.text || ''),
          charCount: 0
        };
        setCount(out.epost);
      }
      if (channels.brev) {
        out.brev = {
          rubrik: String(channels.brev.rubrik || ''),
          text: String(channels.brev.text || ''),
          charCount: 0
        };
        setCount(out.brev);
      }
      if (channels.informationstavla) {
        out.informationstavla = {
          text: String(channels.informationstavla.text || ''),
          charCount: 0
        };
        setCount(out.informationstavla);
      }
      if (channels.sms) {
        out.sms = {
          text: String(channels.sms.text || ''),
          charCount: 0
        };
        setCount(out.sms);
      }

      return out;
    }

    // Handle "ask" status - AI needs more information
    if (parsed.status === 'ask') {
      const question = String(parsed.question || 'Vad vill du informera v√•rdnadshavare om?');
      const assistantHistoryContent = `FR√ÖGA: ${question}`;
      return res.status(200).json({
        message: question,
        fullResponse: assistantHistoryContent,
        generatedContent: null
      });
    }

    // Handle "ready" status - AI has generated content
    if (parsed.status === 'ready') {
      const channels = normalizeChannels(parsed.channels);
      if (!channels || Object.keys(channels).length === 0) {
        return res.status(500).json({
          error: 'Saknar kanalinneh√•ll trots status=ready'
        });
      }
      const friendly = 'Klart! Jag har skapat texter f√∂r olika kanaler i rutan till h√∂ger. Vill du justera n√•got?';
      const assistantHistoryContent = 'KLAR: genererade texter f√∂r v√•rdnadshavare';
      return res.status(200).json({
        message: friendly,
        fullResponse: assistantHistoryContent,
        generatedContent: { channels }
      });
    }

    // Handle unexpected status
    return res.status(500).json({
      error: 'Ov√§ntad status i AI-svar',
      details: parsed
    });

  } catch (err) {
    console.error('Handler error:', err);
    return res.status(500).json({
      error: 'N√•got gick fel',
      details: err.message,
      timestamp: new Date().toISOString()
    });
  }
}

// Vercel configuration
export const config = { 
  maxDuration: 30 
};
